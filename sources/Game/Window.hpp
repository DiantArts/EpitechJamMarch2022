#pragma once

namespace xrn { class Scene; }
namespace xrn { class Menu; }
namespace xrn { class FinalScreen; }



namespace xrn {



class Window {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // *structors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit Window();



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Actions
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Displays the window buffer
    ///
    ///////////////////////////////////////////////////////////////////////////
    void display();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Draws the window buffer
    ///
    ///////////////////////////////////////////////////////////////////////////
    void draw(
        const auto& elem
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Clears the window buffer
    //
    ///////////////////////////////////////////////////////////////////////////
    void clear();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief If the window should close
    //
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto isOpen()
        -> bool;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief If the window should close
    //
    ///////////////////////////////////////////////////////////////////////////
    void close();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Handles the events
    //
    ///////////////////////////////////////////////////////////////////////////
    auto handleEvents(
        ::xrn::Scene& scene
    ) -> bool;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Handles the events
    //
    ///////////////////////////////////////////////////////////////////////////
    auto handleEvents(
        ::xrn::Menu& menu
    ) -> bool;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Handles the events
    //
    ///////////////////////////////////////////////////////////////////////////
    auto handleEvents(
        ::xrn::FinalScreen& menu
    ) -> bool;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Handles the events
    //
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getSize()
        -> sf::Vector2u;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets the mouse position
    //
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getMousePosition() const
        -> ::sf::Vector2i;


private:

    ::sf::RenderWindow m_window;
    bool m_shouldClose{ false };

};



} // namespace xrn

#include <Game/Window.impl.hpp>
