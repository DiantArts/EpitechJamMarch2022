///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <pch.hpp>
#include <xrn/Ecs.hpp>
#include <Game/Window.hpp>
#include <Game/Scene.hpp>
#include <Game/Menu.hpp>
#include <Game/FinalScreen.hpp>



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// *structors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::xrn::Window::Window()
    : m_window{ ::sf::VideoMode::getDesktopMode(), "xrnGame", ::sf::Style::Fullscreen }
{
    m_window.setFramerateLimit(60);
}


///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Actions
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::xrn::Window::display()
{
    m_window.display();
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::Window::clear()
{
    m_window.clear();
}

///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] auto ::xrn::Window::isOpen()
    -> bool
{
    return m_window.isOpen();
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::Window::close()
{
    m_window.close();
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::Window::handleEvents(
    ::xrn::Scene& scene
) -> bool
{
    sf::Event event;
    while (m_window.pollEvent(event)) {
        if (!scene.handleEvent(event)) {
            return false;
        }
    }
    return true;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::Window::handleEvents(
    ::xrn::Menu& menu
) -> bool
{
    sf::Event event;
    while (m_window.pollEvent(event)) {
        if (!menu.handleEvent(event)) {
            return false;
        }
    }
    return true;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::Window::handleEvents(
    ::xrn::FinalScreen& finalScreen
) -> bool
{
    sf::Event event;
    while (m_window.pollEvent(event)) {
        if (!finalScreen.handleEvent(event)) {
            return false;
        }
    }
    return true;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::Window::getSize()
    -> sf::Vector2u
{
    return m_window.getSize();
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::Window::getMousePosition() const
    -> ::sf::Vector2i
{
    return ::sf::Mouse::getPosition(m_window);
}
