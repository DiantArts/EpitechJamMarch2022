///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <pch.hpp>
#include <xrn/Ecs.hpp>
#include <Game/Window.hpp>
#include <Game/Scene.hpp>



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// *structors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::xrn::component::Drawable::Drawable(
    const ::std::string& filename,
    ::xrn::Window& window
)
    : m_window{ &window }
{
    if (!m_texture.loadFromFile("./data/sprites/" + filename)) {
        throw ::std::runtime_error{ "texture failed to load"s + filename };
    }
    m_sprite.setTexture(m_texture);
}




///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Rule of 5
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::xrn::component::Drawable::~Drawable() = default;

///////////////////////////////////////////////////////////////////////////
::xrn::component::Drawable::Drawable(
    ::xrn::component::Drawable&& other
) noexcept
{
    this->swap(::std::move(other));
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::component::Drawable::operator=(
    ::xrn::component::Drawable&& other
) noexcept -> ::xrn::component::Drawable&
{
    this->swap(::std::move(other));
    return *this;
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::component::Drawable::swap(
    ::xrn::component::Drawable&& other
) noexcept
{
    ::std::swap(m_sprite, other.m_sprite);
    ::std::swap(m_texture, other.m_texture);
    m_window = other.m_window;
    m_sprite.setTexture(m_texture);
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Getters/setters
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::xrn::component::Drawable::updatePosition(
    const ::xrn::component::Movable& movable
)
{
    m_sprite.setPosition(movable.getPosition());
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::component::Drawable::draw() const
{
    m_window->draw(m_sprite);
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::component::Drawable::setTextureRect(
    const sf::Rect<int>& rect
)
{
    m_sprite.setTextureRect(rect);
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::component::Drawable::getScale() const
    -> float
{
    return m_sprite.getScale().x;
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::component::Drawable::setScale(float scale)
{
    m_sprite.setScale(scale, scale);
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::component::Drawable::setScale(float scaleX, float scaleY)
{
    m_sprite.setScale(scaleX, scaleY);
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::component::Drawable::getSprite()
    -> ::sf::Sprite&
{
    return m_sprite;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::component::Drawable::getRotation() const
    -> float
{
    return m_sprite.getRotation();
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::component::Drawable::setRotation(float angle)
{
    m_sprite.setRotation(angle);
}
