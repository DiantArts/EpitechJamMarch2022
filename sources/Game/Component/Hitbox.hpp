#pragma once

namespace xrn::component {

///////////////////////////////////////////////////////////////////////////
// Hitbox
///////////////////////////////////////////////////////////////////////////
COMPONENT_IN_NAMESPACE(xrn::component, Hitbox) {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // *structors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
#ifdef DEBUG_HITBOX
    explicit Hitbox(
        int left,
        int top,
        int width,
        int height,
        ::xrn::Window& window
    );
#else
    explicit Hitbox(
        int left,
        int top,
        int width,
        int height
    );
#endif



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Getters/Setters
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Updates the sprite size, rotation, scale and animation relative
    ///  and position
    ///
    ///////////////////////////////////////////////////////////////////////////
    void updatePosition(
        const ::xrn::component::Movable& movable
    );

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getPosition() const
        -> ::sf::Vector2f;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getSize() const
        -> ::sf::Vector2f;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Draws the sprite
    ///
    ///////////////////////////////////////////////////////////////////////////
    void draw() const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Contains
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto contains(
        const ::xrn::component::Hitbox& other
    ) const
        -> bool;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Contains
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto contains(
        const ::sf::Vector2i& other
    ) const
        -> bool;



private:

    ::sf::IntRect m_hitbox{ 0, 0, 0, 0 };
    ::sf::Vector2f m_relativePosition{ 0, 0 };
#ifdef DEBUG_HITBOX
    ::sf::RectangleShape m_hitboxDebug;
    ::xrn::Window* m_window{ nullptr };
#endif

};

} // namespace xr::ecs::component
