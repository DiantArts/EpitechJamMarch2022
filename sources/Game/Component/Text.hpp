#pragma once

namespace xrn::component {

///////////////////////////////////////////////////////////////////////////
// Text
///////////////////////////////////////////////////////////////////////////
COMPONENT_IN_NAMESPACE(xrn::component, Text) {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Static
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief loads global font
    ///
    ///////////////////////////////////////////////////////////////////////////
    static auto loadFont(
        const ::std::string& filename
    ) -> sf::Font;



public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // *structors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit Text(
        const std::string& str,
        sf::Color color,
        ::xrn::Window& window
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Other
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void draw() const;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void set(
        const ::std::string& text
    );

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void updatePosition(
        const ::xrn::component::Movable& movable
    );

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto isOverlapping(
        const ::xrn::component::Hitbox& hitbox
    ) -> bool;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setOverlapColor(
        const ::xrn::component::Hitbox& hitbox
    );



private:

    static inline constexpr const auto fontFilepath{ "hotpizza.ttf" };
    static inline constexpr const auto charSize{ 100uz };
    static inline sf::Font font{ ::xrn::component::Text::loadFont(::xrn::component::Text::fontFilepath) };
    ::sf::Text m_text;
    ::sf::Color m_color;
    ::xrn::Window* m_window;

};

} // namespace xrn::component
